version: "2.2"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - ES_JAVA_OPTS=-Xms${ES_JAVA_HEAP_GB}g -Xmx${ES_JAVA_HEAP_GB}g
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
    environment:
      - ES_JAVA_OPTS=-Xms${ES_JAVA_HEAP_GB}g -Xmx${ES_JAVA_HEAP_GB}g
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
    environment:
      - ES_JAVA_OPTS=-Xms${ES_JAVA_HEAP_GB}g -Xmx${ES_JAVA_HEAP_GB}g
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  fingerprint_serv:
    build:
      context: .
      dockerfile: fingerprint/Dockerfile
    container_name: fingerprint_serv
    volumes:
      - .:/siren/
    network_mode: "host"
#    for profiling
#    security_opt:
#      - seccomp:unconfined
#    cap_add:
#      - SYS_ADMIN
    depends_on:
      - kibana
    command:
      - /bin/sh
      - -c
      - |
        echo "export ELASTIC_USER=${ELASTIC_USER}" \
        "export POSTGRES_USER=${POSTGRES_USER}" \
        "export POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" \
        "export POSTGRES_PORT=${POSTGRES_PORT}" \
        "export POSTGRES_HOST=${POSTGRES_HOST}" \
        "export POSTGRES_DB_NAME=${POSTGRES_DB_NAME}" \
        "export SHARD_COUNT=${SHARD_COUNT}" \
        "export ES_PORT=${ES_PORT}" \
        "export ES_RESULT_WINDOW=${ES_RESULT_WINDOW}" \
        "export REPLICA_COUNT=${REPLICA_COUNT}" \
        "export ELASTIC_BATCH_SIZE=${ELASTIC_BATCH_SIZE}" \
        "export ELASTIC_HOST=${ELASTIC_HOST}" \
        "export CORE_PEAK_ZSCORE=${CORE_PEAK_ZSCORE}" \
        "export CORE_BLOCK_SIZE=${CORE_BLOCK_SIZE}" \
        "export CORE_BLOCK_STRIDE_COEFF=${CORE_BLOCK_STRIDE_COEFF}" \
        "export MIN_WASSERSTEIN_DISTANCE=${MIN_WASSERSTEIN_DISTANCE}" \
        "export THREAD_POOL_QUEUES=${THREAD_POOL_QUEUES}" \
        "export TP_THREADS_PER_QUEUE=${TP_THREADS_PER_QUEUE}" \
        "export SERV_QUEUES=${SERV_QUEUES}" \
        "export SERV_THREADS_PER_QUEUE=${SERV_THREADS_PER_QUEUE}" \
        "export FINGERPRINT_ADDRESS=${FINGERPRINT_ADDRESS}" \
        "export FINGERPRINT_PORT=${FINGERPRINT_PORT}" \
        "export GRPC_PROXY_PORT=${GRPC_PROXY_PORT}" \
        "export POSTGRES_POOL_SIZE=${POSTGRES_POOL_SIZE}" \
        "export ELASTIC_POOL_SIZE=${ELASTIC_POOL_SIZE}" \
        "export ELASTIC_PASSWORD=${ELASTIC_PASSWORD}" \
        "export METADATA_ADDRESS=${METADATA_ADDRESS}" \
        "export SIREN_HOST=${SIREN_HOST}" \
        "export SIREN_PORT=${SIREN_PORT}" \
        "export METADATA_PORT=${METADATA_PORT}" > /home/user/.bashrc
        cp /home/user/.bashrc /home/user/.profile
        /usr/sbin/sshd -D -f /etc/ssh/sshd_config_siren

  metadata_serv:
    build:
      context: .
      dockerfile: metadata/Dockerfile
    container_name: metadata_serv
    volumes:
      - .:/siren/
    network_mode: "host"
    command:
      - /bin/sh
      - -c
      - |
        echo "export METADATA_POSTGRES_USER=${METADATA_POSTGRES_USER}" \
        "export METADATA_POSTGRES_PASSWORD=${METADATA_POSTGRES_PASSWORD}" \
        "export METADATA_POSTGRES_DB_NAME=${METADATA_POSTGRES_DB_NAME}" \
        "export METADATA_POSTGRES_DB_POOL_SIZE=${METADATA_POSTGRES_DB_POOL_SIZE}" \
        "export METADATA_ADDRESS=${METADATA_ADDRESS}" \
        "export METADATA_PORT=${METADATA_PORT}" \
        "export FINGERPRINT_ADDRESS=${FINGERPRINT_ADDRESS}" \
        "export GRPC_PROXY_PORT=${GRPC_PROXY_PORT}" \
        "export METADATA_SECRET_KEY_BASE=${METADATA_SECRET_KEY_BASE}" > /home/user/.bashrc
        cp /home/user/.bashrc /home/user/.profile
        /usr/sbin/sshd -D -f /etc/ssh/sshd_config_siren

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    environment:
      - BASIC_USER=${BASIC_USER}
      - BASIC_PASSWORD=${BASIC_PASSWORD}
      - METADATA_PORT=${METADATA_PORT}
      - FINGERPRINT_PORT=${GRPC_PROXY_PORT}
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.conf
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
    depends_on:
      - fingerprint_serv
      - metadata_serv
    network_mode: "host"
    volumes:
      - /ssl/siren:/ssl/
      - /home/user/siren/shared_auth.conf/:/etc/nginx/shared_auth.conf
      - /home/user/siren/nginx.conf.conf/:/etc/nginx/templates/nginx.conf.conf
      - /home/user/siren/SirenMetadata/:/srv/seeder/data/SirenMetadata
    command:
      - /bin/sh
      - -c
      - |
        rm -rf /etc/nginx/.htpasswd
        echo -n "${BASIC_USER}:" >> /etc/nginx/.htpasswd
        openssl passwd -6 ${BASIC_PASSWORD} >> /etc/nginx/.htpasswd
        /docker-entrypoint.d/20-envsubst-on-templates.sh
        nginx -g "daemon off;"

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local